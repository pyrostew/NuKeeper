strategy:
  matrix:
    Linux:
      imageName: 'ubuntu-latest'
    Windows:
      imageName: 'windows-latest'
    Mac:
      imageName: 'macOS-latest'

pool:
  vmImage: $(imageName)

variables:
- group: GitHub Tokens
- name: buildConfiguration
  value: Release
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'

- bash: echo NugetVersion is $NugetVersion; export NugetVersion
  displayName: 'export NugetVersion into env vars'
  env:
    NugetVersion: $(NugetVersion)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build
    projects: 'NuKeeper.sln'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'NuKeeper.sln'
    arguments: '--collect:"XPlat Code Coverage" --configuration $(BuildConfiguration)'
    nobuild: true
  env:
    GitHubPAT: $(GitHubPAT)

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage'
  inputs:
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop for master'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)'
  condition: and(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq(variables['Agent.OS'], 'Windows_NT'))
